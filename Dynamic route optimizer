import tkinter as tk
from tkinter import ttk, messagebox
from geopy.distance import geodesic
from geopy.geocoders import Nominatim
import requests
import webbrowser

# Initialize Geopy Nominatim
geolocator = Nominatim(user_agent="route_optimizer")

# API Keys
TOMTOM_KEY = "6Wv8CPsRASpUe3ABwOyfonLiaN30kgE9"
AQICN_KEY = "f5b372c33c9e1f543e26d718e757c1e38a19ad69"

# Global variables for coordinates
start_coords = None
end_coords = None

# Function to get coordinates of a location
def get_coordinates(location_name):
    location = geolocator.geocode(location_name)
    if location:
        return location.latitude, location.longitude
    return None

# Function to calculate distance
def calculate_distance(start, end):
    return geodesic(start, end).kilometers

# Function to get AQI data
def get_aqi_data(city_name):
    url = f"http://api.waqi.info/feed/{city_name}/?token={AQICN_KEY}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "ok":
                return data["data"]["aqi"]
        return "Unavailable"
    except:
        return "Unavailable"

# Function to fetch traffic data from TomTom API
def get_traffic_data(start, end):
    start_lat, start_lon = start
    end_lat, end_lon = end
    url = f"https://api.tomtom.com/routing/1/calculateRoute/{start_lat},{start_lon}:{end_lat},{end_lon}/json?traffic=true&key={TOMTOM_KEY}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            routes = data.get("routes", [])
            if routes:
                summary = routes[0]["summary"]
                return summary.get("travelTimeInSeconds", 0) // 60, summary.get("trafficDelayInSeconds", 0) // 60
        return None, None
    except:
        return None, None

# Function to estimate emissions
def estimate_emissions(distance_km, vehicle_type):
    fuel_efficiency = 15  # km per liter for gasoline vehicles
    if vehicle_type == "Electric":
        return 0
    return (distance_km / fuel_efficiency) * 2.3

# Function to handle route calculation
def calculate_route():
    global start_coords, end_coords

    start_location = start_entry.get()
    end_location = end_entry.get()
    vehicle_type = vehicle_type_combobox.get()

    if not start_location or not end_location or not vehicle_type:
        messagebox.showerror("Error", "Please fill in all fields.")
        return

    start_coords = get_coordinates(start_location)
    end_coords = get_coordinates(end_location)

    if not start_coords or not end_coords:
        messagebox.showerror("Error", "Unable to fetch coordinates. Check the location names.")
        return

    distance = calculate_distance(start_coords, end_coords)
    aqi = get_aqi_data(end_location)
    travel_time, traffic_delay = get_traffic_data(start_coords, end_coords)

    emissions = estimate_emissions(distance, vehicle_type)

    result_text.set(
        f"• Start: {start_location}\n"
        f"• End: {end_location}\n"
        f"• Distance: {distance:.2f} km\n"
        f"• Travel Time: {travel_time or 'N/A'} mins\n"
        f"• Traffic Delay: {traffic_delay or 'N/A'} mins\n"
        f"• AQI: {aqi}\n"
        f"• CO2: {emissions:.2f} kg"
    )

# Function to open route in Google Maps
def show_on_maps():
    if start_coords and end_coords:
        google_maps_url = f"https://www.google.com/maps/dir/{start_coords[0]},{start_coords[1]}/{end_coords[0]},{end_coords[1]}"
        webbrowser.open(google_maps_url)
    else:
        messagebox.showerror("Error", "Please calculate the route first.")

# Create the GUI application
app = tk.Tk()
app.title("Route Optimizer")
app.geometry("360x640")  # Mobile-friendly dimensions
app.configure(bg="#F5F5F5")

# Header
header = tk.Label(app, text=" Dynamic Route Optimizer", font=("Arial", 16, "bold"), bg="#007BFF", fg="white")
header.pack(fill="x", pady=10)

# Input Fields
tk.Label(app, text="Start Location:", font=("Arial", 10), bg="#F5F5F5").pack(anchor="w", padx=20, pady=5)
start_entry = tk.Entry(app, font=("Arial", 10), width=30)
start_entry.pack(pady=5)

tk.Label(app, text="End Location:", font=("Arial", 10), bg="#F5F5F5").pack(anchor="w", padx=20, pady=5)
end_entry = tk.Entry(app, font=("Arial", 10), width=30)
end_entry.pack(pady=5)

tk.Label(app, text="Vehicle Type:", font=("Arial", 10), bg="#F5F5F5").pack(anchor="w", padx=20, pady=5)
vehicle_type_combobox = ttk.Combobox(app, values=["Electric", "Gasoline"], state="readonly", font=("Arial", 10))
vehicle_type_combobox.pack(pady=5)

# Buttons
button_frame = tk.Frame(app, bg="#F5F5F5")
button_frame.pack(pady=10)
tk.Button(button_frame, text="Calculate Route", command=calculate_route, font=("Arial", 10), bg="#28A745", fg="white").pack(side="left", padx=10)
tk.Button(button_frame, text="Show Maps", command=show_on_maps, font=("Arial", 10), bg="#007BFF", fg="white").pack(side="left", padx=10)

# Result Display
result_text = tk.StringVar()
result_label = tk.Label(app, textvariable=result_text, font=("Arial", 10), bg="white", bd=1, relief="solid", wraplength=320, anchor="nw", justify="left", padx=10, pady=10)
result_label.pack(pady=10, padx=10, fill="both", expand=True)

# Footer
footer = tk.Label(app, text="© 2025 Route Optimizer", font=("Arial", 8), bg="#F5F5F5", fg="gray")
footer.pack(side="bottom", pady=10)

# Run the application
app.mainloop()